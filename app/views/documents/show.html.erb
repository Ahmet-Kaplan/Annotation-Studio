<div class="span8">
	<h1><%= @document.title %></h1>
	<div id="textcontent">
		<div><!-- Required for cases in which there's no HTML in the text -->
			<%= @document.text.html_safe %>
		</div>
	</div>
	<div class="form-actions">
		<%= link_to 'Back', documents_path, :class => 'btn'  %>
		<% if can? :manage, @document %>
		<%= link_to 'Edit', edit_document_path(@document), :class => 'btn' %>
		<%= link_to 'Delete', document_path(@document), :method => 'delete', :confirm => 'Are you sure?', :class => 'btn btn-danger'%>
		<% end %>	
	</div>
</div><!--/span8 -->
<%# javascript_include_tag "documents" %>
<div class="span4">
	<div id="annotation-well" class="well sidebar-nav sidebar-nav-fixed">
		<h3>Annotations</h3>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/mustache.js/0.4.2/mustache.min.js"></script>

		<ul id="annotation-list"></ul>
		<script type="text/template" id="comment-template">
			<span id="sb{{uuid}}" data-toggle="collapse" data-parent="#annotation-list" href="#full{{uuid}}" data-highlight="#hl{{uuid}}" rel="tooltip" title="{{username}}" class="highlightlink comment">{{{text}}}</span>
			<span id="quote{{uuid}}" class="sbquote details">{{{quote}}}</span>
			<span id="text{{uuid}}" class="sbtext details">{{{text}}}</span>
			<span id="info{{uuid}}" class="sbinfo details">By: {{username}} at: </span>
			<div id="tags{{uuid}}" class="sbtags details">{{#tags}}<span class="label">{{.}}</span> {{/tags}}</div>
		</script>
		<script type="text/template" id="highlight-template">
			<span id="sb{{uuid}}" data-highlight="#hl{{uuid}}" rel="tooltip" title="{{username}}" class="highlightlink highlight">{{{quote}}}</span>
			<span id="quote{{uuid}}" class="sbquote details">{{{quote}}}</span>
			<div id="tags{{uuid}}" class="sbtags details">{{#tags}}<span class="label">{{.}}</span> {{/tags}}</div>
		</script>
	</div><!--/well -->
</div><!--/span4 -->
<%= javascript_include_tag "sidebar" %>
<script type="text/javascript" charset="utf-8">
jQuery(function ($) {

	// Bootstrap Backbone Sidebar //
	var sidebar = new Sidebar.App();
	Backbone.history.start({pushState: true, root: window.location})

	var studio = $('#textcontent').annotator();

	studio.annotator('addPlugin','Auth', {
		token: '<%= @jwt %>'
	});

	var groups = "<%= current_user.rep_group_list %>".split(/, /);
	
	studio.annotator('addPlugin','Store', {
		prefix: 'http://annotations.mit.edu/api',
		// prefix: 'http://localhost:5000/api',
		annotationData: {
			'uri': [location.protocol, '//', location.host, location.pathname].join(''),
			"groups": groups,
			"username": '<%= current_user.first_name_last_initial %>',
		},
		loadFromSearch: {
			'limit': 1000,
			// Should load all of one's own annotations, plus all non-private group-shared annotations
			// Currently: only my own annotations, and I must be in a group to see; "show to all" setting is ignored.
			'user':'<%= current_user.email %>',
			"groups": groups,
			'uri': [location.protocol, '//', location.host, location.pathname].join(''),
		}
	});

	studio.annotator('addPlugin', 'Markdown');
	studio.annotator('addPlugin', 'Tags');
	studio.annotator('addPlugin', 'Unsupported');
	studio.annotator('addPlugin', 'Permissions', {
		user: '<%= current_user.email %>',
		permissions: {
			'read': ['<%= current_user.email %>'],
			'update': ['<%= current_user.email %>'],
			'delete': ['<%= current_user.email %>'],
			'admin': ['<%= current_user.email %>']
		},
		// Permissions settings per-annotation
		showViewPermissionsCheckbox: true,
		showEditPermissionsCheckbox: false
	});

	var subscriber = $('#textcontent').annotator().data('annotator');

	// Create a UUID for a given annotation if needed.
	// Once created, this shouldn't be changed.
	var createUuid = function(annotation) {
		if (annotation.uuid == null) {
			annotation.uuid = Math.uuid(8, 16);
			console.info("New uuid for annotation: '"+annotation.quote+"': "+ annotation.uuid);
		}
		else {
			console.info("Existing uuid for annotation: '"+annotation.quote+"': "+ annotation.uuid);
		}
	};

	// addLinkId(annotation);

	// Add UUIDs to highlights so sidebar and highlights can link to one another.
	var addUuid;
	var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	addUuid = __bind(function(a) {
		if (a.highlights[0] != null) {
			a.highlights[0].id = "hl"+ a.uuid;
			a.highlights[0].title = a.user;
		}
		else {
			console.info("Err...");
		}
	}, this);
	
	var createAndAddUuid = function(annotation){
		createUuid(annotation);
		addUuid(annotation);
	}

	// Update the sidebar with local annotation data
	var loadSidebar = function(annotation) {
		setTimeout(function() {
		    sidebar.listAnnotations(subscriber.dumpAnnotations());
		}, 100);
	};
	
	// Remove all comment icons and load sidebar with local data
	var deleteFromSidebar =	function(annotation) {
		$(".icon-comment").remove();
		setTimeout(function() {
		    sidebar.listAnnotations(subscriber.dumpAnnotations());
		}, 100);
	};

	var showAnnId =  function(annotation) {
		var newAnn = new Sidebar.Annotation(annotation);
		console.info(newAnn.get("uuid"));
	};
	
	// When the annotator loads remote data, update sidebar
	subscriber.subscribe('annotationsLoaded', loadSidebar);

	// Update all highlights with UUIDs
	subscriber.subscribe('annotationsLoaded', __bind(function(annotations) {
		annotations.map(addUuid); // copies the UUID value from the object field to the highlight spans attribute value.
	}, this));

	// Add the UUID to the local annotation object and to the highlight span before saving
	subscriber.subscribe('beforeAnnotationCreated', createUuid); // creates, if need be, and adds, both to object, and to highlight.

	// Once the local object has been created, load the sidebar from local data (already contains UUID)
	subscriber.subscribe('annotationCreated', loadSidebar);
	subscriber.subscribe('annotationCreated', addUuid);

	// When the local object is updated (contains previously created/stored UUID), load the sidebar from local data
	subscriber.subscribe('annotationUpdated', loadSidebar);
	subscriber.subscribe('annotationDeleted', deleteFromSidebar);
	
	mixpanel.track("Loaded Document");
});
</script>
<%= render "documents/help" %>